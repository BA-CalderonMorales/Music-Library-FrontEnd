{"version":3,"sources":["Components/UpdateModal/updateModal.jsx","Components/DisplayTable/displayTable.jsx","Components/CreateSongForm/createSongForm.jsx","Components/SearchBar/searchBar.jsx","Components/Introduction/introduction.jsx","Components/Footer/footer.jsx","App.jsx","index.js"],"names":["Modal","setAppElement","UpdateModal","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","currentId","song","id","updatedSong","state","title","artist","album","genre","release_date","updateSong","updateModalStatus","modal","isModalOpen","checker","Fragment","className","isOpen","this","modalStatus","onRequestClose","style","overlay","backgroundColor","content","position","top","left","right","bottom","border","background","overflow","WebkitOverflowScrolling","borderRadius","outline","padding","onSubmit","type","onChange","placeholder","onClick","Component","DisplayTable","setModalIsOpen","currentSong","currenStatusOfModal","songs","map","deleteSong","CreateSongForm","addNewSong","submit","SearchBar","filterSong","searchCriteria","class","Introduction","Footer","App","componentDidMount","makeGetRequest","displayTable","currentSongArray","console","log","allSongs","backToAllSongs","currentCriteria","currentSongs","a","axios","get","response","completeListOfSongs","data","criteria","temp","toLowerCase","filteredSongsArray","filter","includes","number","delete","newSong","post","error","put","alert","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"qTAGAA,IAAMC,cAAc,S,IAqILC,E,kDAlIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAAe,SAACC,GASd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAvBnB,EA2BnBC,aAAe,SAACL,GAQdA,EAAMM,iBACN,IAAIC,EAAY,EAAKT,MAAMU,KAAKC,GAChC,EAAKR,SAAS,CACZQ,GAAIF,IAEN,IAAIG,EAAc,CAChBD,GAAI,EAAKE,MAAMF,GACfG,MAAO,EAAKD,MAAMC,MAClBC,OAAQ,EAAKF,MAAME,OACnBC,MAAO,EAAKH,MAAMG,MAClBC,MAAO,EAAKJ,MAAMI,MAClBC,aAAc,EAAKL,MAAMK,cAE3B,EAAKlB,MAAMmB,WAAWP,GACtB,EAAKZ,MAAMoB,kBAAkB,EAAKP,MAAMQ,QAjDvB,EAoDnBC,YAAc,SAACC,GAWb,OALA,EAAKpB,SAAS,CACZkB,MAAOE,IAIF,EAAKV,MAAMQ,OA7DlB,EAAKR,MAAQ,CACXF,GAAI,GACJG,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,aAAc,GACdG,OAAO,GATQ,E,0CAmEnB,WAAU,IAAD,OAOP,OACE,cAAC,IAAMG,SAAP,UACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,CACEC,OAAQC,KAAK3B,MAAM4B,YACnBC,eAAgB,kBAAM,EAAKP,aAAY,IAEvCQ,MACE,CACEC,QAAS,CACPC,gBAAiB,QAEnBC,QAAS,CACPC,SAAU,WACVC,IAAK,OACLC,KAAM,OACNC,MAAO,OACPC,OAAQ,OACRC,OAAQ,iBACRC,WAAY,OACZC,SAAU,OACVC,wBAAyB,QACzBC,aAAc,MACdC,QAAS,OACTC,QAAS,SArBjB,UA0BE,mDACA,uBAAMpB,UAAU,iCAAiCqB,SAAUnB,KAAKpB,aAAhE,UACE,uBAAOkB,UAAU,yCAAjB,kBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAC1E2C,SAAUrB,KAAK1B,aAAcgD,YAAatB,KAAK3B,MAAMU,KAAKI,MAAOR,MAAOqB,KAAKd,MAAMC,QACrF,uBAAOW,UAAU,yCAAjB,oBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,SAC1E2C,SAAUrB,KAAK1B,aAAcgD,YAAatB,KAAK3B,MAAMU,KAAKK,OAAQT,MAAOqB,KAAKd,MAAME,SACtF,uBAAOU,UAAU,yCAAjB,mBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAC1E2C,SAAUrB,KAAK1B,aAAcgD,YAAatB,KAAK3B,MAAMU,KAAKO,MAAOX,MAAOqB,KAAKd,MAAMI,QACrF,uBAAOQ,UAAU,yCAAjB,mBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAC1E2C,SAAUrB,KAAK1B,aAAcgD,YAAatB,KAAK3B,MAAMU,KAAKM,MAAOV,MAAOqB,KAAKd,MAAMG,QACrF,uBAAOS,UAAU,yCAAjB,0BACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,eAC1E2C,SAAUrB,KAAK1B,aAAcgD,YAAatB,KAAK3B,MAAMU,KAAKQ,aAAcZ,MAAOqB,KAAKd,MAAMK,eAC5F,wBAAQO,UAAU,kBAAkBsB,KAAK,SAASG,QAAS,kBAAM,EAAK5B,aAAY,IAAlF,oBACA,wBAAQG,UAAU,iBAAiByB,QAAS,kBAAM,EAAK5B,aAAY,IAAnE,iC,GA1HY6B,aC+FXC,E,kDA/Fb,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IAcRqD,eAAiB,SAAC3C,GAKhB,EAAKP,SAAS,CACZyB,aAAa,EACb0B,YAAa5C,KAtBE,EA0BnBU,kBAAoB,SAAAmC,GAKlB,EAAKpD,SAAS,CACZyB,YAAa2B,KA9Bf,EAAK1C,MAAQ,CACXyC,YAAa,CACX3C,GAAI,GACJG,MAAO,GACPC,OAAQ,GACRE,MAAO,GACPD,MAAO,GACPE,aAAc,GACdU,aAAa,IAVA,E,0CAqCnB,WAAU,IAAD,OAKP,OACI,cAAC,IAAMJ,SAAP,UACE,sBAAKC,UAAU,4BAAf,UACE,wBAAOA,UAAU,iCAAjB,UACE,uBAAOA,UAAU,eAAjB,SAEE,qBAAIA,UAAU,KAAd,UACE,oBAAIA,UAAU,MAAd,wBACA,oBAAIA,UAAU,MAAd,oBACA,oBAAIA,UAAU,MAAd,mBACA,oBAAIA,UAAU,MAAd,yBACA,oBAAIA,UAAU,MAAd,0BACA,oBAAIA,UAAU,QACd,oBAAIA,UAAU,aAGlB,gCAGIE,KAAK3B,MAAMwD,MAAMC,KAAI,SAAC/C,GACpB,OACE,qBAAIe,UAAU,OAAd,UACE,6BAAKf,EAAKI,QACV,6BAAKJ,EAAKK,SACV,6BAAKL,EAAKO,QACV,6BAAKP,EAAKM,QACV,6BAAKN,EAAKQ,eACV,6BAAI,wBAAQ6B,KAAK,SAAStB,UAAU,kBAAkByB,QAAS,kBAAM,EAAKG,eAAe3C,IAArF,oBACJ,6BAAI,wBAAQqC,KAAK,SAASG,QAAS,kBAAM,EAAKlD,MAAM0D,WAAWhD,EAAKC,KAAMc,UAAU,iBAAhF,wBAPoBf,EAAKC,YAoBzC,cAAC,EAAD,CAAaiB,YAAaD,KAAKd,MAAMe,YACnClB,KAAMiB,KAAKd,MAAMyC,YACjBnC,WAAYQ,KAAK3B,MAAMmB,WACvBC,kBAAmBO,KAAKP,6B,GAvFX+B,a,iBCmEZQ,E,kDApEb,WAAY3D,GAAQ,IAAD,8BACjB,cAAMA,IAURC,aAAe,SAACC,GASd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SArBnB,EAyBnBC,aAAe,SAACL,GAMdA,EAAMM,iBACN,EAAKR,MAAM4D,WAAW,EAAK/C,QA9B3B,EAAKA,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRE,MAAO,GACPD,MAAO,GACPE,aAAc,IAPC,E,0CAmCnB,WAME,OACE,cAAC,IAAMM,SAAP,UACE,qBAAKC,UAAU,oBAAf,SACE,uBAAMA,UAAU,0CAA0CqB,SAAUnB,KAAKpB,aAAzE,UACE,uBAAOkB,UAAU,yCAAjB,wBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAAQ4C,YAAY,mBAC9FD,SAAUrB,KAAK1B,aAAcK,MAAOqB,KAAKd,MAAMC,QACjD,uBAAOW,UAAU,yCAAjB,oBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,SAAS4C,YAAY,cAC/FD,SAAUrB,KAAK1B,aAAcK,MAAOqB,KAAKd,MAAME,SACjD,uBAAOU,UAAU,yCAAjB,mBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAAQ4C,YAAY,mBAC9FD,SAAUrB,KAAK1B,aAAcK,MAAOqB,KAAKd,MAAMI,QACjD,uBAAOQ,UAAU,yCAAjB,yBACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,QAAQ4C,YAAY,mBAC9FD,SAAUrB,KAAK1B,aAAcK,MAAOqB,KAAKd,MAAMG,QACjD,uBAAOS,UAAU,yCAAjB,+BACE,uBAAOA,UAAU,wCAAwCsB,KAAK,OAAO1C,KAAK,eAC1E2C,SAAUrB,KAAK1B,aAAcK,MAAOqB,KAAKd,MAAMK,eACjD,wBAAQO,UAAU,8BAA8BoC,OAAO,SAAvD,iC,GA7DiBV,aCwDdW,E,kDAvDX,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IAMVC,aAAe,SAACC,GASZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAjBvB,EAqBnBC,aAAe,SAACL,GAMZA,EAAMM,iBACN,EAAKR,MAAM+D,WAAW,EAAKlD,MAAMmD,iBA1BjC,EAAKnD,MAAQ,CACTmD,eAAgB,IAHL,E,0CA+BnB,WAOI,OACA,eAAC,IAAMxC,SAAP,WACI,qBAAKC,UAAU,WAAf,SAA0B,oBAAIA,UAAU,gBAAd,6BAC1B,qBAAKA,UAAU,WAAf,SACI,uBAAMqB,SAAUnB,KAAKpB,aAAc0D,MAAM,aAAzC,UACI,uBAAO5D,KAAK,iBAAiB2C,SAAUrB,KAAK1B,aAC5CK,MAAOqB,KAAKd,MAAMmD,eAAgBvC,UAAU,oCAC5CsB,KAAK,SAASE,YAAY,SAAS,aAAW,WAC9C,wBAAQgB,MAAM,0BAA0BlB,KAAK,SAA7C,yBAGR,qBAAKtB,UAAU,e,GAlDH0B,aCmBTe,EAlBM,WACjB,OACI,eAAC,IAAM1C,SAAP,WACI,qBAAKC,UAAU,SAAf,SACI,oBAAIA,UAAU,wBAAd,6BAEJ,qBAAKA,UAAU,6EAAf,SACI,qBAAKA,UAAU,SAAf,SACI,oBAAGA,UAAU,mBAAb,iGAAoH,uBAApH,sFACmF,uBADnF,4ECCL0C,EAVA,WACX,OACI,cAAC,IAAM3C,SAAP,UACI,qBAAKC,UAAU,SAAf,SACI,sBAAMA,UAAU,mBAAhB,oFCyKD2C,E,kDArKb,WAAYpE,GAAQ,IAAD,8BACjB,cAAMA,IAQRqE,kBAAoB,WAIlB,EAAKC,kBAbY,EAgBnBC,aAAe,SAACC,GAMdC,QAAQC,IAAI,EAAK7D,MAAM8D,UACvB,IAAIC,EAAiB,EAAK/D,MAAM8D,SACH,KAAzB,EAAKE,gBACP,EAAK1E,SAAS,CACZ2E,aAAcF,IAIhB,EAAKzE,SAAS,CACZ2E,aAAcN,KA/BD,EAoCnBF,eApCmB,sBAoCF,8BAAAS,EAAA,6DAQfN,QAAQC,IAAR,gBARe,kBAUQM,IAAMC,IAAI,gCAVlB,OAUTC,EAVS,OAWTC,EAAsBD,EAASE,KACnC,EAAKjF,SAAS,CACZwE,SAAUQ,IAEZ,EAAKZ,aAAaY,GAfL,kDAkBbV,QAAQC,IAAI,qBAlBC,0DApCE,EA0DnBX,WAAa,SAACsB,GAOZ,IAAIC,EAAO,EAAKzE,MAAM8D,SACtB,EAAKE,gBAAkBQ,EAASE,cAChC,IAAIC,EACJA,EAAqBF,EAAKG,QAAO,SAAA/E,GAAI,OAAKA,EAAKI,MAAMyE,cAAcG,SAAS,EAAKb,kBAAsBnE,EAAKO,MAAMsE,cAAcG,SAAS,EAAKb,kBAAsBnE,EAAKK,OAAOwE,cAAcG,SAAS,EAAKb,kBAAsBnE,EAAKM,MAAMuE,cAAcG,SAAS,EAAKb,kBAAqBnE,EAAKQ,aAAawE,SAAS,EAAKb,oBAC9T,EAAKN,aAAaiB,GAClBf,QAAQC,IAAR,iBAtEiB,EAyEnBhB,WAzEmB,uCAyEN,WAAMiC,GAAN,eAAAZ,EAAA,6DAOXN,QAAQC,IAAIiB,GAPD,kBASYX,IAAMY,OAAO,+BAAiCD,GAT1D,OASLT,EATK,OAUTT,QAAQC,IAAIQ,GAVH,gDAaTT,QAAQC,IAAR,MACAD,QAAQC,IAAI,4BAdH,QAgBXD,QAAQC,IAAR,gBACA,EAAKJ,iBAjBM,yDAzEM,wDA6FnBV,WA7FmB,uCA6FN,WAAMiC,GAAN,eAAAd,EAAA,+EAOYC,IAAMc,KAAK,+BAAgCD,GAPvD,OAOLX,EAPK,OAQTT,QAAQC,IAAIQ,EAASE,MARZ,gDAWTX,QAAQsB,MAAR,MAXS,QAaX,EAAKzB,iBAbM,yDA7FM,wDA6GnBnD,WA7GmB,uCA6GN,WAAMT,GAAN,eAAAqE,EAAA,+EAMYC,IAAMgB,IAAI,+BAAiCtF,EAAKC,GACrE,CACE,MAAQ,GAAR,OAAYD,EAAKI,OACjB,OAAS,GAAT,OAAaJ,EAAKK,QAClB,MAAQ,GAAR,OAAYL,EAAKO,OACjB,MAAQ,GAAR,OAAYP,EAAKM,OACjB,aAAe,GAAf,OAAmBN,EAAKQ,gBAZjB,OAMLgE,EANK,OAcTT,QAAQC,IAAIQ,EAASE,MAdZ,gDAiBTX,QAAQC,IAAR,MACAuB,MAAM,0DAAD,cAlBI,QAoBX,EAAK3B,iBApBM,yDA7GM,wDAoInB4B,OAAS,WAKP,OACE,sBAAKzE,UAAU,kBAAf,UAEE,qBAAKA,UAAU,+DAAf,SACE,cAAC,EAAD,CAAWsC,WAAY,EAAKA,eAG9B,qBAAKtC,UAAU,+DAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,oCAAf,UACE,cAAC,EAAD,CAAc+B,MAAO,EAAK3C,MAAMiE,aAC9BpB,WAAY,EAAKA,WACjBvC,WAAY,EAAKA,aAEnB,cAAC,EAAD,CAAgByC,WAAY,EAAKA,gBAGnC,qBAAKnC,UAAU,oCAAf,SACE,cAAC,EAAD,UA3JN,EAAKZ,MAAQ,CACX8D,SAAU,GACVG,aAAc,IAEhB,EAAKD,gBAAkB,GANN,E,UADH1B,a,MCHlBgD,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10e1f948.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Modal from 'react-modal'\r\n\r\nModal.setAppElement('#root');\r\n\r\nclass UpdateModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      id: '',\r\n      title: '',\r\n      artist: '',\r\n      album: '',\r\n      genre: '',\r\n      release_date: '',\r\n      modal: false\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    /**\r\n     * Changes the state of the specific variable inside of state, based off of the \r\n     * event.target.name. So inside of the form below, there are different properties \r\n     * that are attached to the tags. Two of the properties are \"name\" and \"value\". \r\n     * We use these to allow this.setState to properly change the state of each \r\n     * variable inside of state. This is due to the onChange property inside of \r\n     * the <input ... onChange...> tag property.  \r\n     * */\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    /**\r\n     * Once all the changes have been made in handleChange, the <input... onSubmit ...> \r\n     * is going to be sending these changes from the current state, back to the \r\n     * GrandParent component App method: this.props.updateSong(song). It's also \r\n     * passing data back to the Parent component DisplayTable method: \r\n     * this.props.updateModalStatus(true or false).\r\n     */\r\n    event.preventDefault();\r\n    let currentId = this.props.song.id\r\n    this.setState({\r\n      id: currentId\r\n    })\r\n    let updatedSong = {\r\n      id: this.state.id,\r\n      title: this.state.title,\r\n      artist: this.state.artist,\r\n      album: this.state.album,\r\n      genre: this.state.genre,\r\n      release_date: this.state.release_date,\r\n    }\r\n    this.props.updateSong(updatedSong)\r\n    this.props.updateModalStatus(this.state.modal);\r\n  }\r\n\r\n  isModalOpen = (checker) => {\r\n    /**\r\n     * Checks whether the user has pressed on either \"Close\" or \"Update\" inside of render method. Updates\r\n     * the status of the whether the modal is visible via a prop passed down from DisplayTable.jsx called\r\n     * this.props.updateModalStatus(true or false).\r\n     */\r\n    this.setState({\r\n      modal: checker\r\n    })\r\n    // Returns the current state of the modalStatus inside of UpdateModal class. Not to be confused with \r\n    // modalStatus taken in from props.\r\n    return this.state.modal;\r\n  }\r\n\r\n  // const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  render() {\r\n    /**\r\n     * Populates a modal that is going to be open whenever the user chooses Edit inside of DisplayTable\r\n     * component. Once they click on Edit, the only way to get out of the modal is to either update the \r\n     * info inside of the current form, or close the modal. Passes information taken in from form back\r\n     * to this.handleChange and this.handleSubmit to allow for changes to happen to our backend server.\r\n     */\r\n    return(\r\n      <React.Fragment>\r\n        <div className=\"App\">\r\n          <Modal\r\n            isOpen={this.props.modalStatus} // True if modal open, False, if closed, brought in from DisplayTable.\r\n            onRequestClose={() => this.isModalOpen(false)} // Dictates whether a person presses close or update.\r\n            /* style attribute start */\r\n            style={ \r\n              {\r\n                overlay: {\r\n                  backgroundColor: 'grey'\r\n                },\r\n                content: {\r\n                  position: 'absolute',\r\n                  top: '40px',\r\n                  left: '40px',\r\n                  right: '40px',\r\n                  bottom: '40px',\r\n                  border: '1px solid #ccc',\r\n                  background: '#fff',\r\n                  overflow: 'auto',\r\n                  WebkitOverflowScrolling: 'touch',\r\n                  borderRadius: '4px',\r\n                  outline: 'none',\r\n                  padding: '2rem'\r\n                }\r\n              }\r\n            }>\r\n            {/* style attribute end */}  \r\n            <h1>Make Changes Here</h1>\r\n            <form className=\"row g-3 align-items-center p-2\" onSubmit={this.handleSubmit} >\r\n              <label className=\"lead d-flex justify-content-center p-2\">Song</label>\r\n                <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"title\" \r\n                onChange={this.handleChange} placeholder={this.props.song.title} value={this.state.title} />\r\n              <label className=\"lead d-flex justify-content-center p-2\">Artist</label>\r\n                <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"artist\"  \r\n                onChange={this.handleChange} placeholder={this.props.song.artist} value={this.state.artist} />\r\n              <label className=\"lead d-flex justify-content-center p-2\">Genre</label>\r\n                <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"genre\"  \r\n                onChange={this.handleChange} placeholder={this.props.song.genre} value={this.state.genre} />\r\n              <label className=\"lead d-flex justify-content-center p-2\">Album</label>\r\n                <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"album\"  \r\n                onChange={this.handleChange} placeholder={this.props.song.album} value={this.state.album} />\r\n              <label className=\"lead d-flex justify-content-center p-2\">Release Date</label>\r\n                <input className=\"bg-light form-control form-control-lg\" type=\"date\" name=\"release_date\" \r\n                onChange={this.handleChange} placeholder={this.props.song.release_date} value={this.state.release_date} />\r\n              <button className=\"btn btn-primary\" type=\"submit\" onClick={() => this.isModalOpen(false)}>Update</button>\r\n              <button className=\"btn btn-danger\" onClick={() => this.isModalOpen(false)}>Close</button>\r\n            </form>\r\n          </Modal>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n \r\nexport default UpdateModal;","import React, { Component } from 'react';\r\nimport './displayTable.css'\r\nimport UpdateModal from '../UpdateModal/updateModal';\r\n\r\nclass DisplayTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      currentSong: {\r\n        id: '',\r\n        title: '',\r\n        artist: '',\r\n        genre: '',\r\n        album: '',\r\n        release_date: '',\r\n        modalStatus: false \r\n      },\r\n     }\r\n  }\r\n\r\n  setModalIsOpen = (song) => {\r\n    /**\r\n     * This will open the modal up and feed this.state.currentSong with song. It will also set the modalStatus to \r\n     * true in order to open up the modal.\r\n     */\r\n    this.setState({\r\n      modalStatus: true, // modalIsOpen will be set to true upon clicking 'Edit' below\r\n      currentSong: song // song w/ id, artist, album, etc.\r\n    })\r\n  }\r\n\r\n  updateModalStatus = currenStatusOfModal => {\r\n    /**\r\n     * The status of modalStatus will change to false, thus closing the modal window and taking the user back\r\n     * to the home screen created by App.jsx file.\r\n     */\r\n    this.setState({\r\n      modalStatus: currenStatusOfModal\r\n    })\r\n\r\n  }\r\n\r\n  render() { \r\n    /**\r\n     * Renders a table of songs to with the ability to delete or edit them in a separate, UpdateModal component.\r\n     * Slowly builds an array of table rows with a map function built into JavaScript. \r\n     */\r\n    return ( \r\n        <React.Fragment>\r\n          <div className=\"col-md-6 table-responsive\">\r\n            <table className=\"table table-striped table-dark\">\r\n              <thead className=\"align-middle\">\r\n                {/* Table Header */}\r\n                <tr className=\"h6\">\r\n                  <th className=\"p-3\">Song Title</th>\r\n                  <th className=\"p-3\">Artist</th>\r\n                  <th className=\"p-3\">Genre</th>\r\n                  <th className=\"p-3\">Album Title</th>\r\n                  <th className=\"p-3\">Release Date</th>\r\n                  <th className=\"p-3\"></th>\r\n                  <th className=\"p-3\"></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* Table Body */}\r\n                {\r\n                  this.props.songs.map((song) => {\r\n                    return(\r\n                      <tr className=\"lead\" key={song.id}>\r\n                        <td>{song.title}</td> \r\n                        <td>{song.artist}</td>\r\n                        <td>{song.genre}</td>\r\n                        <td>{song.album}</td>\r\n                        <td>{song.release_date}</td>\r\n                        <td><button type=\"button\" className=\"btn btn-primary\" onClick={() => this.setModalIsOpen(song)}>Edit</button></td>\r\n                        <td><button type=\"button\" onClick={() => this.props.deleteSong(song.id) } className=\"btn btn-danger\">Delete</button></td>\r\n                      </tr>\r\n                    )\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n            {/* \r\n              Here, the modalStatus and currentSong inside of DisplayTable state are being passed down to UpdateModal to manipulate.\r\n              We're also passing down the updateModalStatus method in order to update the modal status to false once we're done \r\n              working with the data inside of UpdateModal child component. We're also passing down the updateSong function from \r\n              the Grandfather component: App.\r\n            */}\r\n            <UpdateModal modalStatus={this.state.modalStatus} \r\n              song={this.state.currentSong} \r\n              updateSong={this.props.updateSong}\r\n              updateModalStatus={this.updateModalStatus} />\r\n          </div>  \r\n        </React.Fragment>\r\n        \r\n       );\r\n\r\n  }\r\n}\r\n \r\nexport default DisplayTable;\r\n","import React, { Component } from 'react';\r\n\r\nclass CreateSongForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      title: \"\",\r\n      artist: \"\",\r\n      genre: \"\",\r\n      album: \"\",\r\n      release_date: \"\",\r\n     }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    /**\r\n     * Changes the state of the specific variable inside of state, based off of the \r\n     * event.target.name. So inside of the form below, there are different properties \r\n     * that are attached to the tags. Two of the properties are \"name\" and \"value\". \r\n     * We use these to allow this.setState to properly change the state of each \r\n     * variable inside of state. This is due to the onChange property inside of \r\n     * the <input ... onChange...> tag property.  \r\n     * */ \r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    /**\r\n     * Once all the changes have been made in handleChange, the <input... onSubmit ...> \r\n     * is going to be sending these changes from the current state, back to the \r\n     * Parent component App method: this.props.addNewSong(song).\r\n     */\r\n    event.preventDefault();\r\n    this.props.addNewSong(this.state)\r\n  }\r\n\r\n  render() { \r\n    /**\r\n     * Populates a form that will be taking in information to create a new song. Uses \r\n     * this.handleChange and this.handleSubmit to allow these changes to occur inside\r\n     * of the backend server.\r\n     */\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"col-md-6 bg-light\">\r\n          <form className=\"row g-3 align-items-center p-2 bg-light\" onSubmit={this.handleSubmit} >\r\n            <label className=\"lead d-flex justify-content-center p-2\">Song Title</label>\r\n              <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"title\" placeholder=\"Yellow Submarine\" \r\n              onChange={this.handleChange} value={this.state.title} />\r\n            <label className=\"lead d-flex justify-content-center p-2\">Artist</label>\r\n              <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"artist\" placeholder=\"The Beatles\" \r\n              onChange={this.handleChange} value={this.state.artist} />\r\n            <label className=\"lead d-flex justify-content-center p-2\">Genre</label>\r\n              <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"genre\" placeholder=\"Psychadelic Rock\" \r\n              onChange={this.handleChange} value={this.state.genre} />\r\n            <label className=\"lead d-flex justify-content-center p-2\">Album Title</label>\r\n              <input className=\"bg-light form-control form-control-lg\" type=\"text\" name=\"album\" placeholder=\"Yellow Submarine\" \r\n              onChange={this.handleChange} value={this.state.album} />\r\n            <label className=\"lead d-flex justify-content-center p-2\">Song Release Date</label>\r\n              <input className=\"bg-light form-control form-control-lg\" type=\"date\" name=\"release_date\" \r\n              onChange={this.handleChange} value={this.state.release_date} />\r\n            <button className=\"lead btn btn-primary btn-lg\" submit=\"submit\">Add Song</button>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n     );\r\n  }\r\n}\r\n \r\nexport default CreateSongForm;","import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            searchCriteria: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        /**\r\n         * Changes the state of the specific variable inside of state, based off of the \r\n         * event.target.name. So inside of the form below, there are different properties \r\n         * that are attached to the tags. Two of the properties are \"name\" and \"value\". \r\n         * We use these to allow this.setState to properly change the state of each \r\n         * variable inside of state. This is due to the onChange property inside of \r\n         * the <input ... onChange...> tag property.  \r\n         * */ \r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        /**\r\n         * Once all the changes have been made in handleChange, the <input... onSubmit ...> \r\n         * is going to be sending these changes from the current state, back to the \r\n         * Parent component App method: this.props.filterSong(searchCriteria).\r\n         */\r\n        event.preventDefault();\r\n        this.props.filterSong(this.state.searchCriteria);\r\n    }\r\n\r\n    render() { \r\n        /**\r\n         * Populates a search bar for users to look for a specific song, or for songs\r\n         * with characteristics that reflect what they type in. A user will come back \r\n         * to the list of all songs in the backend server by just typing nothing \r\n         * in the search bar and clicking on \"Search\".\r\n         */\r\n        return ( \r\n        <React.Fragment>\r\n            <div className=\"col-md-8\"><h1 className=\"display-5 p-2\">Music Library</h1></div>\r\n            <div className=\"col-md-4\">\r\n                <form onSubmit={this.handleSubmit} class=\"d-flex p-3\">\r\n                    <input name='searchCriteria' onChange={this.handleChange} \r\n                    value={this.state.searchCriteria} className=\"form-control form-control-lg me-2\" \r\n                    type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n            <div className=\"col\"></div>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import React from 'react';\r\n\r\n\r\nconst Introduction = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"col-12\">\r\n                <h1 className=\"display-1 text-center\">Music Archive</h1>\r\n            </div>\r\n            <div className=\"row row-cols-1 row-cols-xs-2 row-cols-sm-2 row-cols-md-2 row-cols-lg-2 p-3\">\r\n                <div className=\"col-12\">\r\n                    <p className=\"lead text-center\"> Feel free to browse our catalog. The search bar at the top of your screen is meant <br/>\r\n                    assist you in looking for your favorite song. If for any reason you can't find the <br/>\r\n                    song you're searching for, feel free to add it to our archive.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Introduction;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"col-12\">\r\n                <span className=\"lead text-center\"> Copyright © 2021 Carter &#38; Brandon : Pair Programming Project </span>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport DisplayTable from './Components/DisplayTable/displayTable';\r\nimport axios from 'axios';\r\nimport CreateSongForm from './Components/CreateSongForm/createSongForm';\r\nimport SearchBar from './Components/SearchBar/searchBar';\r\nimport Introduction from './Components/Introduction/introduction';\r\nimport Footer from './Components/Footer/footer';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allSongs: [],\r\n      currentSongs: []\r\n    }\r\n    this.currentCriteria = '';\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    /**\r\n     * Best place to make API request. As soon as the page is rendered, this will run.\r\n     */\r\n    this.makeGetRequest();\r\n  }\r\n\r\n  displayTable = (currentSongArray) => {\r\n    /**\r\n     * Takes in songs array and decides whether the current songs should be updated to show\r\n     * a filtered list of songs or a complete list of songs, based off of the search criteria\r\n     * in the constructor variable this.currentCriteria.\r\n     */\r\n    console.log(this.state.allSongs); // All the songs in our DB\r\n    let backToAllSongs = this.state.allSongs;\r\n    if (this.currentCriteria === '') { // If the criteria is blank...\r\n      this.setState({\r\n        currentSongs: backToAllSongs // Back to all the songs.\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        currentSongs: currentSongArray // Else, go to the current songs list.\r\n      })\r\n    }\r\n  }\r\n\r\n  makeGetRequest = async () => {\r\n    /**\r\n     * This anonymous/asynchronous function is requesting data from the backend\r\n     * server to get all the songs in the current list of songs contained inside\r\n     * of the server. The setState is what makes the render method rerun, \r\n     * allowing for new data to populate onto the screen because of the change \r\n     * of state.\r\n     */\r\n    console.log(this);\r\n    try{\r\n      let response = await axios.get('http://127.0.0.1:8000/music/')\r\n      let completeListOfSongs = response.data\r\n      this.setState({\r\n        allSongs: completeListOfSongs\r\n      })\r\n      this.displayTable(completeListOfSongs);\r\n    }\r\n    catch (ex) {\r\n      console.log(\"error in API Call\");\r\n    }\r\n  }\r\n\r\n  filterSong = (criteria) => {\r\n    /**\r\n     * This will be working alongside the SearchBar component to return a list of \r\n     * songs that are pertinent to the (criteria) being brought in from the SearchBar\r\n     * component. After filtering through the songs, a an array of new songs will be\r\n     * found and displayed on the table via this.displayTable(filteredSongsArray).\r\n     */\r\n    let temp = this.state.allSongs\r\n    this.currentCriteria = criteria.toLowerCase();\r\n    let filteredSongsArray = []\r\n    filteredSongsArray = temp.filter(song => (song.title.toLowerCase().includes(this.currentCriteria)) || (song.genre.toLowerCase().includes(this.currentCriteria)) || (song.artist.toLowerCase().includes(this.currentCriteria)) || (song.album.toLowerCase().includes(this.currentCriteria)) || song.release_date.includes(this.currentCriteria))\r\n    this.displayTable(filteredSongsArray);\r\n    console.log(this);\r\n  }\r\n\r\n  deleteSong = async number => {\r\n    /**\r\n     * This method is working alongside the DisplayTable component to find a specific\r\n     * song id (number), and then deleting it from the backend server. Upon deletion,\r\n     * the data inside of the table will be rerendered via the this.makeGetRequest at the\r\n     * end of the method (after the catch).\r\n     */\r\n    console.log(number); // 25, 26, 27, 28\r\n    try{                                             // ?id=25             \r\n      let response = await axios.delete('http://127.0.0.1:8000/music/' + number) // This line works\r\n      console.log(response);\r\n    }\r\n    catch (ex) {\r\n      console.log(ex);\r\n      console.log(\"error in Delete API Call\");\r\n    }\r\n    console.log(this);\r\n    this.makeGetRequest();\r\n  }\r\n\r\n  addNewSong = async newSong => {\r\n    /**\r\n     * This method is working alongside the CreateSongForm component to make a\r\n     * post request to the backend server to create a new song and then populate \r\n     * it onto our current table that is displaying all the songs on the screen.\r\n     */\r\n    try{\r\n      let response = await axios.post('http://127.0.0.1:8000/music/', newSong)\r\n      console.log(response.data);\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n    this.makeGetRequest();\r\n  }\r\n\r\n  updateSong = async song => {\r\n    /**\r\n     * This method is going to work alongside DisplayTable and UpdateModal components to update \r\n     * a specific song in our database and current songs state inside of App.jsx.\r\n     */\r\n    try {\r\n      let response = await axios.put('http://127.0.0.1:8000/music/' + song.id, \r\n      {\r\n        \"title\": `${song.title}`,\r\n        \"artist\": `${song.artist}`,\r\n        \"genre\": `${song.genre}`,\r\n        \"album\": `${song.album}`,\r\n        \"release_date\": `${song.release_date}`,\r\n      })\r\n      console.log(response.data); // contains: title, artist, genre, album, release_date for song to update\r\n    }\r\n    catch (err){\r\n      console.log(err);\r\n      alert(`Sorry for the inconvenience. Try submitting one again. ${err}`);\r\n    }\r\n    this.makeGetRequest();\r\n  }\r\n\r\n  render = () => { \r\n    /**\r\n     * LifeCycle: The constructor runs first, then this render method, and finally componentDidMount will run.\r\n     * After componentDidMount runs, then the new data is populated inside of here.\r\n     */\r\n    return ( \r\n      <div className=\"container-fluid\">\r\n        \r\n        <div className=\"row row-cols-1 row-cols-sm-1 row-cols-md-1 row-cols-lg-1 p-3\">\r\n          <SearchBar filterSong={this.filterSong} />\r\n        </div>\r\n\r\n        <div className=\"row row-cols-1 row-cols-sm-1 row-cols-md-1 row-cols-lg-1 p-3\">\r\n          <Introduction />\r\n        </div>\r\n        \r\n        <div className=\"row justify-content-md-center p-3\">\r\n          <DisplayTable songs={this.state.currentSongs} \r\n            deleteSong={this.deleteSong}\r\n            updateSong={this.updateSong} />\r\n         \r\n          <CreateSongForm addNewSong={this.addNewSong} />\r\n        </div>\r\n\r\n        <div className=\"row justify-content-md-center p-2\">\r\n          <Footer />\r\n        </div>\r\n        \r\n      </div>\r\n     );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}